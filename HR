{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "lWGt-Dwy3eBL"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
        "from scipy.stats import chi2_contingency"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 941
        },
        "id": "03bf3a39",
        "outputId": "c085fa8b-0f14-4692-ebfd-2214715fb920"
      },
      "source": [
        "cont_vars = ['satisfaction_level','last_evaluation','number_project','average_montly_hours','time_spend_company']\n",
        "print(\"Correlations with left:\")\n",
        "print(df[cont_vars + ['left']].corr()['left'].sort_values(ascending=False))\n",
        "ct = pd.crosstab(df_orig['salary'], df_orig['left'])\n",
        "chi2, p, dof, expected = chi2_contingency(ct)\n",
        "print(\"Chi-square for salary vs left: chi2=%.3f p=%.3e\" % (chi2, p))\n",
        "ctd = pd.crosstab(df_orig['Department'], df_orig['left'])\n",
        "chi2d, pd_val, dofd, expectedd = chi2_contingency(ctd)\n",
        "print(\"Chi-square for department vs left: chi2=%.3f p=%.3e\" % (chi2d, pd_val))\n",
        "features = ['satisfaction_level','time_spend_company','number_project','average_montly_hours',\n",
        "            'salary_num','promotion_last_5years','Work_accident']\n",
        "for f in features:\n",
        "    if f not in df.columns:\n",
        "        raise KeyError(f\"Feature {f} not found in dataframe columns.\")\n",
        "\n",
        "X = df[features]\n",
        "y = df['left']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled  = scaler.transform(X_test)\n",
        "model = LogisticRegression(max_iter=1000)\n",
        "model.fit(X_train_scaled, y_train)\n",
        "y_pred = model.predict(X_test_scaled)\n",
        "y_proba = model.predict_proba(X_test_scaled)[:,1]\n",
        "\n",
        "acc = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", acc)\n",
        "print(\"Classification report:\\n\", classification_report(y_test, y_pred))\n",
        "print(\"Confusion matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
        "print(\"ROC AUC:\", roc_auc_score(y_test, y_proba))\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_proba)\n",
        "plt.figure(figsize=(6,5))\n",
        "plt.plot(fpr, tpr)\n",
        "plt.plot([0,1],[0,1],'--')\n",
        "plt.title('ROC curve')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlations with left:\n",
            "left                    1.000000\n",
            "time_spend_company      0.144822\n",
            "average_montly_hours    0.071287\n",
            "number_project          0.023787\n",
            "last_evaluation         0.006567\n",
            "satisfaction_level     -0.388375\n",
            "Name: left, dtype: float64\n",
            "Chi-square for salary vs left: chi2=381.225 p=1.652e-83\n",
            "Chi-square for department vs left: chi2=86.825 p=7.042e-15\n",
            "Accuracy: 0.7976\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.93      0.87      2857\n",
            "           1       0.62      0.38      0.47       893\n",
            "\n",
            "    accuracy                           0.80      3750\n",
            "   macro avg       0.72      0.66      0.67      3750\n",
            "weighted avg       0.78      0.80      0.78      3750\n",
            "\n",
            "Confusion matrix:\n",
            " [[2648  209]\n",
            " [ 550  343]]\n",
            "ROC AUC: 0.813770503754751\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAAHqCAYAAADyPMGQAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAbRFJREFUeJzt3Xd4FGXDxeHfphdSgJCQQDAU6R0EaSIQKSqKKKAoIGIHLIgKSrWAivLaUBQLYKOJioIgICggCNJ775BAKAlJSNud74+VxXwJkIVsJtmc+7pyvTOzM7snq68cZp55xmIYhoGIiIiIXJGH2QFEREREigoVJxEREZE8UnESERERySMVJxEREZE8UnESERERySMVJxEREZE8UnESERERySMVJxEREZE8UnESERERySMVJxEREZE8UnESkXw3efJkLBaL48fLy4ty5crx4IMPcvTo0VyPMQyDr776iptuuonQ0FACAgKoU6cOr7zyCikpKZf8rB9++IFOnToRFhaGj48PUVFRdO/end9//91Vv56IFGMWPatORPLb5MmT6du3L6+88goVK1YkLS2NVatWMXnyZGJiYtiyZQt+fn6O/a1WKz179mTGjBm0atWKrl27EhAQwLJly/j222+pWbMmixYtIiIiwnGMYRg89NBDTJ48mQYNGnDPPfdQtmxZjh8/zg8//MDatWtZsWIFzZs3N+MrEBF3ZYiI5LMvv/zSAIw1a9Zk2/7iiy8agDF9+vRs28eMGWMAxuDBg3O815w5cwwPDw+jY8eO2baPGzfOAIxnnnnGsNlsOY6bOnWq8ffff+fDb3P1kpOTTf18Ecl/ulQnIgWmVatWAOzdu9ex7fz584wbN46qVasyduzYHMd07tyZPn36MH/+fFatWuU4ZuzYsVSvXp23334bi8WS47hevXrRpEmTy+ax2Wy899571KlTBz8/P8qUKUPHjh35559/ADhw4AAWi4XJkyfnONZisTBq1CjH+qhRo7BYLGzbto2ePXtSsmRJWrZs6ch38ODBHO8xdOhQfHx8OHPmjGPb33//TceOHQkJCSEgIIDWrVuzYsWKy/4eIlJwVJxEpMAcOHAAgJIlSzq2LV++nDNnztCzZ0+8vLxyPa53794A/PLLL45jTp8+Tc+ePfH09LzqPP369eOZZ54hOjqaN998kyFDhuDn5+coaFejW7dupKamMmbMGB555BG6d++OxWJhxowZOfadMWMG7du3d3wfv//+OzfddBNJSUmMHDmSMWPGcPbsWdq2bcvq1auvOpOI5J/c/yslIpIPEhMTSUhIIC0tjb///pvRo0fj6+vL7bff7thn27ZtANSrV++S73Phte3bt2f73zp16lx1tiVLljB58mSeeuop3nvvPcf25557DuMahn7Wq1ePb7/9Ntu2G2+8kenTp/P88887tq1Zs4Z9+/Y5zloZhsHjjz9OmzZt+PXXXx1n0R577DFq1arFsGHD+O233646l4jkD51xEhGXiY2NpUyZMkRHR3PPPfcQGBjInDlzKF++vGOfc+fOARAUFHTJ97nwWlJSUrb/vdwxV/L9999jsVgYOXJkjtdyu/SXV48//niObT169GDt2rXZLlFOnz4dX19f7rzzTgA2bNjA7t276dmzJ6dOnSIhIYGEhARSUlJo164df/75Jzab7apziUj+UHESEZeZMGECCxcuZNasWdx6660kJCTg6+ubbZ8L5edCgcrN/y9XwcHBVzzmSvbu3UtUVBSlSpW66vfITcWKFXNs69atGx4eHkyfPh2wn12aOXMmnTp1cvwuu3fvBqBPnz6UKVMm289nn31Geno6iYmJ+ZpVRJynS3Ui4jJNmjShcePGAHTp0oWWLVvSs2dPdu7cSYkSJQCoUaMGAJs2baJLly65vs+mTZsAqFmzJgDVq1cHYPPmzZc8Jj9c6syT1Wq95DH+/v45tkVFRdGqVStmzJjBSy+9xKpVqzh06BBvvvmmY58LZ5PGjRtH/fr1c33vC9+ZiJhHZ5xEpEB4enoyduxYjh07xocffujY3rJlS0JDQ/n2228vWUimTp0K4Bgb1bJlS0qWLMl333132RJzOZUrV+bYsWOcPn36kvtcGLR99uzZbNtzu0PuSnr06MHGjRvZuXMn06dPJyAggM6dO2fLA/azabGxsbn+eHt7O/25IpK/VJxEpMDcfPPNNGnShHfffZe0tDQAAgICGDx4MDt37uTll1/OcczcuXOZPHkyHTp04MYbb3Qc8+KLL7J9+3ZefPHFXAdzf/3115e9E+3uu+/GMAxGjx6d47UL7xccHExYWBh//vlnttc/+uijvP/S//k8T09PvvvuO2bOnMntt99OYGCg4/VGjRpRuXJl3n77bZKTk3Mcf/LkSac/U0Tyny7ViUiBev755+nWrRuTJ092DKQeMmQI69ev580332TlypXcfffd+Pv7s3z5cr7++mtq1KjBlClTcrzP1q1beeedd1iyZIlj5vC4uDh+/PFHVq9ezV9//XXJHG3atKFXr168//777N69m44dO2Kz2Vi2bBlt2rRhwIABADz88MO88cYbPPzwwzRu3Jg///yTXbt2Of17h4eH06ZNG8aPH8+5c+fo0aNHttc9PDz47LPP6NSpE7Vq1aJv376UK1eOo0ePsmTJEoKDg/n555+d/lwRyWdmzr4pIu7pUjOHG4ZhWK1Wo3LlykblypWNrKysbNu//PJLo0WLFkZwcLDh5+dn1KpVyxg9evRlZ+CeNWuW0b59e6NUqVKGl5eXERkZafTo0cNYunTpFXNmZWUZ48aNM6pXr274+PgYZcqUMTp16mSsXbvWsU9qaqrRr18/IyQkxAgKCjK6d+9unDhxwgCMkSNHOvYbOXKkARgnT5685OdNmjTJAIygoCDj/Pnzue6zfv16o2vXrkbp0qUNX19f47rrrjO6d+9uLF68+Iq/j4i4np5VJyIiIpJHGuMkIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ5VOwmwLTZbBw7doygoKBregK6iIiIuAfDMDh37hxRUVF4eFz+nFKxK07Hjh0jOjra7BgiIiJSyBw+fJjy5ctfdp9iV5yCgoIA+5cTHBxschoRERExW1JSEtHR0Y6OcDnFrjhduDwXHBys4iQiIiIOeRnCo8HhIiIiInmk4iQiIiKSRypOIiIiInmk4iQiIiKSRypOIiIiInmk4iQiIiKSRypOIiIiInmk4iQiIiKSRypOIiIiInmk4iQiIiKSRypOIiIiInlkanH6888/6dy5M1FRUVgsFn788ccrHrN06VIaNmyIr68vVapUYfLkyS7PKSIiIgImF6eUlBTq1avHhAkT8rT//v37ue2222jTpg0bNmzgmWee4eGHH2bBggUuTioiIiICXmZ+eKdOnejUqVOe9584cSIVK1bknXfeAaBGjRosX76c//3vf3To0MFVMUVEREQAk4uTs1auXElsbGy2bR06dOCZZ54xJ5CIiIhw6FQqW44luu4DDCtYPKkaEUSV8BKu+5w8KFLFKS4ujoiIiGzbIiIiSEpK4vz58/j7++c4Jj09nfT0dMd6UlKSy3OKiIi4E6vN4JGp//DX3gQCfbJXh0yrjaS0LJd9dmXLUT7yfo9Xs3rRon03FSdXGzt2LKNHjzY7hoiISKFw5Ewq/1u4m+T0zDwfs3LvKUc5SsvMuOR+ja8riYfFcs0Z/ysqK4UKp07xqs8MNgbfn6/vfTWKVHEqW7Ys8fHx2bbFx8cTHByc69kmgKFDhzJo0CDHelJSEtHR0S7NKSIiUhDSMq38c+AMO+LydjUly2bwxq87rukzv3+iOUF+OetDhVIB+Hl7XtN7OxgGOApYM9hfloplalCxRJn8ef9rUKSKU7NmzZg3b162bQsXLqRZs2aXPMbX1xdfX19XRxMREblqJ5LSOJaYlqd95246xumUTL5fd+SaPrNqRAn6NI/J8/6eFgtta4QTHuR3TZ97Refi4PuHofWLULGVfVvFm1z7mU4wtTglJyezZ88ex/r+/fvZsGEDpUqVokKFCgwdOpSjR48ydepUAB5//HE+/PBDXnjhBR566CF+//13ZsyYwdy5c836FURERJxmtRks3XmChOR0jp5N4/3Fu6/5PbvUt8+JeCU2w6BqRBBP3lw5T/sXqIMrYWYfSI6HpGMwYA145NNZrHxianH6559/aNOmjWP9wiW1Pn36MHnyZI4fP86hQ4ccr1esWJG5c+fy7LPP8t5771G+fHk+++wzTUUgIiKmO3kunR1xSfy2NR4vz+yFZM2B02w5moT3v9szrUau71EuNPdhJ/9fQnI6z95SlcgQP9rViCDQx7PwlSBnGAb8PRF+Gwa2LChTA3p8XehKE4DFMIzc/+m5qaSkJEJCQkhMTCQ4ONjsOCIiUsB2x5/j6WkbCA3wzrf3XLXvFLar/NM0tkY4FouFHo2jia0ZceUD3E16MswZCFtn29dr3wOd3wPfgrt7zpluUKTGOImISOGTmJpJutWa62uLt59g6OzNlAr0KeBUl3Y65dJ3heWXm6uVoVZUzj+AO9WOpHQJ+3fh5eFBmaBiPgY39TR82QlO7gAPL2j/OjR97D8DwwsfFScREXFa4vlMNh05y0OT11zystN/FURZcdZtdSPpUKtsvr2fr5cHN11fBn+fwnd5qdDyLwll68D5s9B9ClS40exEV6TiJCIil2UYBluPJbFq3ykAvlxxgKNnz+fYz+MSJwlsBrx1T13qR4e6MKVzIoL9CPHPv0t14gRrFmSl2S/FWSz2y3LpyRBUNC5TqjiJiEgOyelZvLtwF6dTM5i97ugl9ytf0h9/b09+eaolvl460yJXkHwCZj0EvsH/Dv72AJ9A+08RoeIkIiIONpvBH7tO0nfymlxfv6VmBCV8vbAAQ2+toTE6kneHV8OMPnDuGHgHwqndUKaa2amcpuIkIlLMHTyVwpS/DmIzDCb/dSDH60M6VadGZDAtq4TheanrcSKXYhiwehIseAlsmRBW1X62qQiWJlBxEhEp1ioNnXvJ2+hfvrUGj9xUqWADiXvJSIGfn4HNM+zrNe+EOyeAb5Cpsa6FipOISDF04lwaTV5fnG1bWAkfetwQjaeHB72bXUdYCV2Gk2s080HY/RtYPOGWV6BZ/0I91UBeqDiJiBQDJ5LSGDlnK9Z/Ty/9ti37A9P3jrlVl+Ek/7V+EU5sh7smQkxLs9PkCxUnERE3lGW1MfC79aw7dAZPi+WSD5AND/Jl1dB2eKg0SX6wWSFuM0TVt6+XbwwD14FX4ZkA9VqpOImIuIn1h87w+fL9+Hp58vuOeM6kZubYp1JYIA+3so9bCvH35paaESpNkj9STsH3D8GhVdBvIUTWtW93o9IEKk4iIm7BMAzu+uivXF+b+lATAn29qBpRgiA/TfooLnBkLczoDUlHwDsAEg9fLE5uRsVJRKSIWn/oDHd99BfenpZsjz25vW4kdcqF4OXpwW11Iikb4mdiSnFrhgH/fAHzh4A1A0pVtk81EFHT7GQuo+IkIlJI/bUngY//2EvWJZ4Ft/LfR6D8tzSVDvThw54NCySfFHOZ5+GXQbDxW/t69duhy0fgF2JuLhdTcRIRKWSW707ggc//zvP+3RuXZ9At1fD0sGgmbyk466baS5PFA9qNhBZPF/mpBvJCxUlEpBA4lZzO1mNJTPxjL3/tPZXttUdaVaRu+dBcjwsN8KZ5Zc3oLSa44WE48g80eAAqtTY7TYFRcRIRKQCGYZCWaePs+Qzmb4lzXH7bGX+OXzcfJyXDmuOYJ26uTL+WFTURpRQONius/RLqPwDefuDhCXdPMjtVgVNxEhFxsTMpGTR+fZFj8snLqRJegsgQP97uVo+IYA3qlkIi9TR8/zDsXQzHN8Ed75udyDQqTiIiLrTh8Fm6TFiRY3u5UH+aViwFQFqWlVtqRtCmWjihAe415424gWPrYXpvSDwEXv5wXQuzE5lKxUlEJB+cTsngdEoGi7bHE/fvLN2nUzKYs/GYY597b4hm+O018fb0wMfLw6yoInm3birMHQzWdChZ0T7VQNnaZqcylYqTiMhVyrLaeGraev7ae4qzuczS/V+vdanNAzdeV0DJRK5RZhrMGwzrv7KvV+1kf96cf6ipsQoDFScRkVykpGeRkp6VY/vag2fYdjyJbceSWLzjRI7XQwO8OZuaSf82lbFgwWYYdKodSZ3y7j23jbiZlBOw/WfAAm2HQctB4KGzpKDiJCICQEaWjbUHz5BptbH5aCLjFux06viP729Ii+vDCNYjTcQdhFaAe76wL1dpZ26WQkbFSUSKBZvN4McNR0lITndsm77mMGmZNjw9LBw6nZrrcbnNj2S1GdzftAIG0KV+OZr8O8hbpMiy2WDZ2xBZH6q2t29TYcqVipOIuL1Tyek0em1RnvevGRmMt5cHz8Zez83Vwl2YTKQQOH8GZj8GuxfYH5cycD0EljY7VaGl4iQibm3GP4d5YdambNu6NijnWM60GfRpdh0eHhZKB/pwXenAgo4oYp7jm2BGLzhzALz8oMNYlaYrUHESEbdgGAaHT58nw2pjwdY4Tp6zX5Kb/NcBxz4PNo9h1B21TEooUshs+A5+eQay0iD0OujxFUTWMztVoafiJCJF1lerDjLrn8P4+3iyat/py+77eZ/GtKsRUUDJRAoxm9U+1cA/FwZ/3wJdP4UAjdXLCxUnESlSMrJsNHjlt1yf7XZBiL83ieczGdCmCgDVygapNIlc4OEJhg2wwM1D4KYXNNWAE1ScRKTIMAyD8Qt35ShNIzvXpEyQL6UDfbmxUikslpx3wokUezbbxYLU6S2ofQ9UbGVupiJIxUlECjWbzeCrVQf5YsV+Dp7KPmXAokE3EVM6EC9P/W1Z5JJsNljxPzj4F/ScYT/j5OWr0nSVVJxEpNDadiyJW99flutrH/ZsQJXwoAJOJFLEpCXCD0/Azrn29R1zoeYd5mYq4lScRKRQOnw6NUdpmtCzIRXDAqkRGaTLcSJXEr8Vpj8Ap/eBpw/c+rZKUz5QcRKRQmHPiXNMW32YLJsBwPHE847XHm9dmcHtq+qSnEhebZoBPz8NmakQEg3dp0C5RmancgsqTiJimsOnU9l45CwAA75dn+s+ja4ryZBO1QswlUgRt+wdWPyKfblSG7j7c01qmY9UnESkQB1PPM/3a4+QlmnjwyV7crxeu1wwbf59zInFYuHWOmULOqJI0XZ9e/jzbWjWH24eah8MLvlGxUlECoRhGPy9/zT3froqx2t1y4cQ4ONJqUAfJvRsqPFLIs5KPgklytiXy9aBp9ZDkP7S4QoqTiLiUmsPnqHflDWcTc3Mtr10oA+d60XR6LqSdK4XZVI6kSLOMOCvD2DJGOjzM0TfYN+u0uQyKk4i4lIfLdmTozR1qR/FuG718NZgb5Grl5YEP/WH7XPs69t/ulicxGVUnETEZTKtNhbvOAFAlfASvH9vA00lIJIfTuywTzVwajd4eEOnN6HxQ2anKhZUnETEJc6lZVJn1G+O9Vtrl6VmVLCJiUTcxJbv4aeBkJkCweWg+1Qo39jsVMWGipOIuMTYX3dkW3/y3wfuisg12LcUZv17ZqniTXDPlxAYZmqk4kbFSUTy3dqDZ/j270OO9b1jbsXTQ5fnRK5ZxdZQozOUrgJthoGn/hgvaPrGReSanUvLZO3BM3z65z7+2nsq22uzn2yu0iRyLQ6vgYia4BMIFgt0m6K5mUyk4iQiTkvLtHIuLYu5m46x5sAZ5m4+nut+T7W7noYVShZwOhE3YRiw6mP4bRjU7gpdJ9mLk0qTqVScRMQpb87fwcdL9+b6WpkgX2JKB/Bg84rE1gzH10v/gRe5KunJMGcgbJ19cZs1E7x8zMskgIqTiDjh9bnbmLRsf7ZtQX5e3HR9GR5rXYm65UPNCSbiTk7ughm94OQO8PCCDmOhySP2s01iOhUnEcmTxdvjs5WmBc/cRMWwQHy8NImlSL7Z9hP8+CRkJENQpH08U4WmZqeS/1BxEpErmvjHXt74z/QCfz7fhgqlA0xMJOKG0pNh7mB7abquJXT7EkqEm51K/h8VJxG5pO3Hk/hxw1E++WOfY9vEBxqpNIm4gm8Je1natQDajdRUA4WU/qmISK6S0jLp9N6ybNt+GdiS2uVCTEok4oYO/Q2pp6D6rfb1mJb2Hym0VJxEJIdTyek0em2RY/22OpF0qlNWpUkkvxgGrJ4EC4aClx88sgTKVDU7leSBipOIZPP/S1NYCV8m3N/QxEQibiYjBX5+BjbPsK9ffwsER5kaSfJOxUlEHGatPcLgmRsd6zUig/mqXxMTE4m4mVN7YfoDcGIbWDyh/atw45OaaqAIUXESKeZ2xp1j6soDHDqdyrLdCY7tMaUD+PXpViYmE3EzO+bCD49DehKUiLA/oDemhdmpxEkqTiLFmNVm0OHdP3NsH3ZbDfo0jyn4QCLu7OBf9tJUoRl0mwxBZc1OJFdBxUmkmErLtFJ9+HzHevPKpbkhphQda5elRmSwiclE3FTsKAitAI0fAk9vs9PIVVJxEimGNh05yx0frnCsR4b48e0jN5qYSMQNHVkLKz+Erp/ai5KnNzR9zOxUco1UnESKoWembXAsB/t5sfzFtuaFEXE3hgH/fAHzh4A1A8JrQuvnzU4l+UTFSaQY2peQAsDN1cowua/umhPJNxmpMPc52Pitfb1GZ51lcjMqTiLFzJmUDMdyh1oanCqSb07vg+m9IX4zWDzsY5qaP6WpBtyMipNIMZGWaeWNX3fw88Zjjm2trg8zMZGIG9n3B8zoBWmJEFgG7vkCKt5kdipxARUnETd37Ox5HvxyNbvik7NtrxYRRPmSelivSL4IjgKbDco3ge5TNBO4G/MwO8CECROIiYnBz8+Ppk2bsnr16svu/+6771KtWjX8/f2Jjo7m2WefJS0trYDSihRuJ8+lE5eYRlxiGntPJtP4tUU0f+P3HKXp2diqfNq7kUkpRdyENfPictj18OAv8OBclSY3Z+oZp+nTpzNo0CAmTpxI06ZNeffdd+nQoQM7d+4kPDw8x/7ffvstQ4YM4YsvvqB58+bs2rWLBx98EIvFwvjx4034DUQKh4wsG1WH/XrZfZpWLMXLt9WgbvnQggkl4s6OroNZfaHz+1CptX1bVH1TI0nBsBiGYZj14U2bNuWGG27gww8/BMBmsxEdHc3AgQMZMmRIjv0HDBjA9u3bWbx4sWPbc889x99//83y5cvz9JlJSUmEhISQmJhIcLAm+ZOiLTUji/8t3MWkZfuzbff2tA9GzbQalAv15+eBLSkV6GNGRBH3s3YKzBtsn2oguik8tEADwIs4Z7qBaWecMjIyWLt2LUOHDnVs8/DwIDY2lpUrV+Z6TPPmzfn6669ZvXo1TZo0Yd++fcybN49evXpd8nPS09NJT093rCclJeXfLyFioqGzN/Pd6kPZtnl7Wtj5aic8PPQfcZF8l5lmL0zrv7KvV7sNunyk0lTMmFacEhISsFqtREREZNseERHBjh07cj2mZ8+eJCQk0LJlSwzDICsri8cff5yXXnrpkp8zduxYRo8ena/ZRcx2JiUjR2ma8VgzmlQsZVIiETd35qD9rrnjG+1TDbQdBi2eBQ/ThwpLAStSd9UtXbqUMWPG8NFHH9G0aVP27NnD008/zauvvsrw4cNzPWbo0KEMGjTIsZ6UlER0dHRBRRa5ZntOJPP58v2sP3SGHXHnsFjsExNfMPvJ5tQvH6qzTCKucvYwfNoazp+BgNJw9+dQuY3ZqcQkphWnsLAwPD09iY+Pz7Y9Pj6esmVzn5Rv+PDh9OrVi4cffhiAOnXqkJKSwqOPPsrLL7+MRy7N39fXF19f3/z/BUQKwOmUDGLH/5Ft239LU8sqYSpNIq4WUh6q3AKn9kD3qRCqv3wXZ6YVJx8fHxo1asTixYvp0qULYB8cvnjxYgYMGJDrMampqTnKkaenJwAmjnEXyXdzNh7jqe/WZ9t2c7Uy1CsfSqc6ZSkV6EOgjxeBvkXqpLFI0ZF62n5Jzj/UPoap83vg4Qle+ot4cWfqf3UHDRpEnz59aNy4MU2aNOHdd98lJSWFvn37AtC7d2/KlSvH2LFjAejcuTPjx4+nQYMGjkt1w4cPp3Pnzo4CJVLU7T2ZnKM0ta0ezhcP3mBSIpFi5vhGmN4LImpBj2/s45h8NFms2JlanHr06MHJkycZMWIEcXFx1K9fn/nz5zsGjB86dCjbGaZhw4ZhsVgYNmwYR48epUyZMnTu3JnXX3/drF9BJF+cz7DS/I3FBPh4cfTsecf2//WoR4sqYYQH+ZmYTqQYWf8NzB0EWf9OrJwcD8GR5maSQsXUeZzMoHmcpLBJSE6n8WuLcmzv36Yyz3eobkIikWIoKx1+fQHWTravX98eun4K/iVNjSUFo0jM4yRSnH216iDf/n0IwzDYEXfOsT2shA+f9bmB8CBfokL9TUwoUoycPQwzesOxdYAF2rwErQZrqgHJlYqTSAFLy7Qy/MctObbfXjeSD3s2NCGRSDFmGDD9fvu4Jv+S0PUzuD7W7FRSiKk4iRSwWWuPOJZHda5J5fAShAf5Ua1skImpRIopiwVu+x/MHwJ3fwYlrzM7kRRyKk4iBWjGmsMM+8/ZpgdbVDQxjUgxdf4sHFt/cRLL8o2g3296dIrkiYqTiAulpGfxz8EzTPpzHxlWG6v3n3a89sF9DUxMJlJMxW2B6Q/AuePQbyFE1rVvV2mSPFJxEslHFwZ7vzZ3G1uOJpF4PjPX/X7s34L60aEFG06kuNs4HX5+GrLOQ0gFMGxmJ5IiSMVJJB91em9ZtrvkLgjy86JSmRLc36QCzSqXJrqUJtMTKTBZGbDgJVgzyb5euZ19PFOAHootzlNxEskHyelZ1B65INu2JjGleLJNZWpEBhMRrAksRUyReBRm9oEja+zrN70ANw+xPz5F5CqoOIlcg5T0LD79cx/vLd6dbfue1zvh5ak5YERMt2m6vTT5hcBdn0K1jmYnkiJOxUnkGvy2LU6lSaQwa/E0pJyEJo9AqUpmpxE3oOIk4oTDp1OZtfYIe08m88um4/h52wtS5TKB9GkeQ88mFVSaRMyUlgTL3oGbh4K3n/2SXMexZqcSN6LiJOKEAd+tZ+Phs471tEz7XTl31CtH72Yx5oQSEbsT2+1TDZzaA2mJ0PldsxOJG1JxEsmjPSeSHaUpyM+Lrg3KcVPVMlSNCNJdciJm2zwL5gyEzFQILgcNHjA7kbgpFSeRKzAMg3s/XcXf/5m8cvFzrQkP0p1yIqazZsJvw+Hvj+3rFVvDPV9AYJi5ucRtqTiJXMFLP2zJVpra14xQaRIpDJKOw8wH4fAq+3rLQdB2mKYaEJdScRK5BMMw+GXTcb5bfcixbdOo9gT7eZuYSkQcrBmQsBN8g+GuiVD9NrMTSTGg4iRyCU9N28DPG4851n9/rrVKk0hhUvI66PE1BEVC6cpmp5FiQvdNi+Tih/VHspWmsV3rUKlMCRMTiQjp52BmX9j1n1n6Y1qqNEmB0hknkf+IS0zjro9WcDwxzbHt75fa6ZEpImY7uROm97JfmjuwDJ7eBD66m1UKnoqTCGCzGQyasYEfNxzLtv2rfk1UmkTMtvVH+Kk/ZCTbL8t1m6LSJKZRcZJia9G2eH7ZdIxMm8HcTcezvXZjpVJ8cF9DygT5mpRORLBmwaKRsPJD+3pMK/tUAyXCzc0lxZqKkxQrf+1NYN/JFACG/bgl130WP9eayhrPJGKuzDT4+m44uNy+3vwpaDcSPPXHlphL/wZKsZCWaeWhyWv4a++pHK893royYSV8aHhdSRpWKGlCOhHJwdsPwq6H4xugy0dQ806zE4kAKk5SDBiGQfXh87Nt61irLAYGNSNDeDr2epOSiUg2hgGZ5y+OX+r0JjQfqLvmpFBRcRK3tunIWV6fuz3btmUvtNGz5UQKm4wUmPMUpJyEXj/YZ//28lVpkkJHxUnc0sx/DvP8rE05th94QzMLixQ6CXtgRi84sQ08vODIGqhwo9mpRHKl4iRuISU9C5thcPBUKq/+si3bs+UAmlcuzcjOtUxKJyKXtP1n+PFJSE+CEhHQbbJKkxRqKk5SpB1PPE+zsb9f8vXx3etxR70ovDw1Sb5IoWLNgt9fhRXv2tcrNLOXpqCyZqYSuSIVJymyjp49T4s3ci9NzSqV5s2761KhtMYyiRRKc5+FdVPtyzf2h1tGg6eeBSmFn4qTFEkp6Vnc+eFyx3q76uFMuL8hFgt4e3jg4WExMZ2IXFGTx2Dnr9DpLajd1ew0Inmm4iRFUr8pa0hIzgCg1fVhfP7gDSYnEpHLMgw4uQPCa9jXy9bW8+akSNLADylyDMNg1b6Lg7/H3VPPxDQickUZqfDjEzCxJRz6++J2lSYpglScpMipOuxXx/LsJ5tTNkQP4RUptE7vg89vgY3f2c86ndhmdiKRa6JLdVKkJJ7PJNNqAFAywJuakcEmJxKRS9o5H2Y/CumJEFgG7vkSKrYyO5XINVFxkiJjy9FEbv/g4oDw1S/H4q1pBkQKH5sVlo6FP8fZ18s3ge5TIDjK3Fwi+UDFSYqMuz5a4ViuGBao0iRSWG378WJpavIYtH8NvHxMjSSSX1ScpEg4cS7NcYkutkY4n/XRXXQihVatrrDrN6jSDup2NzuNSL5ScZIioffnqx3LQ2+tYWISEcnV5llQtSP4lgCLBbp+YnYiEZfQtQ4p9M6mZrAj7hwAoQHeVC5TwuREIuKQeR5+6g/f94M5A+13zom4MZ1xkkLv29WHHMtf92tqYhIRyebMAZjeC+I2gcUDytYxO5GIy6k4SaF2IimNt+bvBMDHy4NaUZp+QKRQ2L0Qvn8Y0s5CQGm45wuodLPZqURcTsVJCi3DMHh2xgbH+ojba2Kx6Bl0Iqay2eDPt2DpG4AB5RpB96kQUt7sZCIF4prGOKWlpeVXDpEcXvphCyv2nHKsP3DjdSamEREAzp+GNZ8DBjTuB31/VWmSYsXp4mSz2Xj11VcpV64cJUqUYN++fQAMHz6czz//PN8DSvH13X/GNn3/RHMTk4iIQ2AYdJsMXT6G28eDl6/ZiUQKlNPF6bXXXmPy5Mm89dZb+PhcnNCsdu3afPbZZ/kaToqvLUcTHcujOtek0XUlTUwjUsyt/xq2/nhxPaYF1O9pWhwRMzldnKZOncqnn37K/fffj6enp2N7vXr12LFjR76Gk+Lrs2X7HMvdGkebmESkGMtMg5+ftk838OOT9rvoRIo5pweHHz16lCpVquTYbrPZyMzMzJdQIj9uOAbAjZVKEeirexhECtzZQzCjNxxbD1ig5bMQUsHsVCKmc/pPpJo1a7Js2TKuuy77QN1Zs2bRoEGDfAsmxdf4hbscy/c00tkmkQK393eY1c8+ENy/JNz9GVSJNTuVSKHgdHEaMWIEffr04ejRo9hsNmbPns3OnTuZOnUqv/zyiysySjGSnmXl/cW7Heud60WamEakGPrzbfj9NcCAqAb2qQZCdaZJ5AKnxzjdeeed/PzzzyxatIjAwEBGjBjB9u3b+fnnn7nllltckVGKiXNpmdQcscCxPv+ZVvh6eV7mCBHJd2lnAQMa9oG+81WaRP6fqxo80qpVKxYuXJjfWaSYm73uKFab/TlX5Uv6U72sZgkXKRCGYX8wL0C7UVChOVS/1dRIIoWV02ecKlWqxKlTp3JsP3v2LJUqVcqXUFI8/bU3wbG8+LnWJiYRKUY2ToevukBWhn3d00ulSeQynC5OBw4cwGq15tienp7O0aNH8yWUFE9bjyUBcF+TCrpEJ+JqWRkw9zn44VHYtxTWTzU7kUiRkOdLdXPmzHEsL1iwgJCQEMe61Wpl8eLFxMTE5Gs4KV6OnDkPQEzpAJOTiLi5xKMwsw8cWWNfbz0EGvU1N5NIEZHn4tSlSxcALBYLffr0yfaat7c3MTExvPPOO/kaToqP5PQsx3Kb6uEmJhFxc/v+gFkPQWoC+IVA18+ganuzU4kUGXkuTjabDYCKFSuyZs0awsLCXBZKip8jZ1Idy9eHlzAxiYgbW/8NzBkAhg3K1oHuX0GpimanEilSnL6rbv/+/a7IIcVYRpaNju8uA8DH0wPLhbt7RCR/RTcFnxJQozPc9g54+5udSKTIuarpCFJSUvjjjz84dOgQGRkZ2V576qmn8iWYFB/frT7kWO7d7LrL7CkiTjt/xj77N0BYFXh8uX1uJv0FReSqOF2c1q9fz6233kpqaiopKSmUKlWKhIQEAgICCA8PV3ESpyWdv/iMw2G31zQxiYib2TwLfn4G7v0aKt1s31ZSfzkRuRZOT0fw7LPP0rlzZ86cOYO/vz+rVq3i4MGDNGrUiLffftsVGcWN/b4jnnf+fTZdp9plTU4j4iayMuDXF+H7fpBxDtZpqgGR/OJ0cdqwYQPPPfccHh4eeHp6kp6eTnR0NG+99RYvvfSSKzKKm9p6LJGHJv/jWK9dLuQye4tIniQdhym3w98T7eutnoOuk8zNJOJGnL5U5+3tjYeHvW+Fh4dz6NAhatSoQUhICIcPH873gOKeth5L5Lb3lzvWX7mzFr2bxZgXSMQdHFgOM/tCygnwDYG7JmoWcJF85vQZpwYNGrBmjX3StNatWzNixAi++eYbnnnmGWrXru10gAkTJhATE4Ofnx9NmzZl9erVl93/7Nmz9O/fn8jISHx9falatSrz5s1z+nPFXAO/Xe9Y7tsiRqVJ5FrFbYYpd9hLU3gteHSJSpOICzhdnMaMGUNkZCQAr7/+OiVLluSJJ57g5MmTfPLJJ0691/Tp0xk0aBAjR45k3bp11KtXjw4dOnDixIlc98/IyOCWW27hwIEDzJo1i507dzJp0iTKlSvn7K8hJtuXkAJAbI0IRnauZXIaETcQURvqdIO6PeDhRVC6stmJRNySxTAMw6wPb9q0KTfccAMffvghYJ9kMzo6moEDBzJkyJAc+0+cOJFx48axY8cOvL29r+ozk5KSCAkJITExkeDg4GvKL1cnMTWTeq/8BsC64bdQKtDH5EQiRdTJnVAiAvxD7evWTPDw0lQDIk5yphs4fcbpUtatW8ftt9+e5/0zMjJYu3YtsbGxF8N4eBAbG8vKlStzPWbOnDk0a9aM/v37ExERQe3atRkzZkyuDx2Wwuvv/accy6H+V1eARYq9LbPh0zbww+Pw75Md8PRWaRJxMaeK04IFCxg8eDAvvfQS+/btA2DHjh106dKFG264wfFYlrxISEjAarUSERGRbXtERARxcXG5HrNv3z5mzZqF1Wpl3rx5DB8+nHfeeYfXXnvtkp+Tnp5OUlJSth8x14lz6Y5lDw/9R17EKdZMWPAyzOoLmSmQkWz/EZECkee76j7//HMeeeQRSpUqxZkzZ/jss88YP348AwcOpEePHmzZsoUaNWq4Mis2m43w8HA+/fRTPD09adSoEUePHmXcuHGMHDky12PGjh3L6NGjXZpLnJOWaT9D2KFWxBX2FJFszsXbC9PBFfb1Fs9A2+HgeVUPgRCRq5DnM07vvfceb775JgkJCcyYMYOEhAQ++ugjNm/ezMSJE50uTWFhYXh6ehIfH59te3x8PGXL5j4RYmRkJFWrVsXT09OxrUaNGsTFxeV49MsFQ4cOJTEx0fGjKRPMZRgGn/xpP1uZaTVteJ1I0XNoFXxyk700+QTZH9B7y2iVJpEClufitHfvXrp16wZA165d8fLyYty4cZQvX/6qPtjHx4dGjRqxePFixzabzcbixYtp1qxZrse0aNGCPXv2ZLskuGvXLiIjI/HxyX2Asa+vL8HBwdl+xDxdJqzg5L+X6iKC/UxOI1JEWDPtY5mS46BMDftUAzXvMDuVSLGU5+J0/vx5AgICALBYLPj6+jqmJbhagwYNYtKkSUyZMoXt27fzxBNPkJKSQt++fQHo3bs3Q4cOdez/xBNPcPr0aZ5++ml27drF3LlzGTNmDP3797+mHFIwbv9gGRuPJDrWH29dycQ0IkWIpzfc8znUu88+1UDY9WYnEim2nDrH+9lnn1GiRAkAsrKymDx5MmFhYdn2ceYhvz169ODkyZOMGDGCuLg46tevz/z58x0Dxg8dOuSYpRwgOjqaBQsW8Oyzz1K3bl3KlSvH008/zYsvvujMryEmOHQqlS1HLw7M3/VaJ3y88u2mThH3k7AHTmy7eGapXCO4q5G5mUQk7/M4xcTEYLnCba4Wi8Vxt11hpXmczBEzZK5jeffrnfD2VGkSuaTtP8MPT4A1A/r9BlH1zU4k4tac6QZ5PuN04MCBa80lxdSFu+gAIkP8VJpELsWaBb+/Civeta9XaA5Bud8sIyLm0O0Y4nKf/HHxLOTcp1qZmESkEEs+aZ9q4MAy+3qzARA7yj6+SUQKDRUncblftxx3LOvxKiK5OLwGZvSGc8fAOxDu/BBqdzU7lYjkQsVJXCrxfCY74s4BcF+TCianESmk9i62l6awqtDjayhTzexEInIJKk7iUr/vuDjB6VPtqpiYRKQQu+kF8PKFGx4G3yCz04jIZWiUrrjU6v1nHMuRIf4mJhEpRE7thdmPQuZ5+7qHB7R8VqVJpAi4quK0d+9ehg0bxn333ceJEycA+PXXX9m6dWu+hpOiLT4pje9WHwKg8XUlTU4jUkjsmAeftoFN02HxK2anEREnOV2c/vjjD+rUqcPff//N7NmzSU62P5V748aNl3zQrhQ/mVYbTcdcfJzO4A4asyHFnM0Ki1+FafdBeiJEN4XmA81OJSJOcro4DRkyhNdee42FCxdmez5c27ZtWbVqVb6Gk6LJMAyuf/lXx/rN1cpwY6XSJiYSMVnKKfj6blj2tn296ePQ5xcIjjI3l4g4zenB4Zs3b+bbb7/NsT08PJyEhIR8CSVF2/rDZ7Otf/ngDeYEESkMjm+C7+6DpCPgHQB3fAB17jE7lYhcJafPOIWGhnL8+PEc29evX0+5cuXyJZQUba/P3e5Y3vFqxys+qkfErfmHQmYqlKoMDy9WaRIp4pwuTvfeey8vvvgicXFxWCwWbDYbK1asYPDgwfTu3dsVGaWIWXvw4p10ft6eJiYRMYnt4mOGCK0AD3wPjy6BiJrmZRKRfOF0cRozZgzVq1cnOjqa5ORkatasyU033UTz5s0ZNmyYKzJKEbJ6/2nH8tSHmpiYRMQkp/fDpDaw8+I4P8o1BL8Q8zKJSL6xGIZhXM2Bhw4dYsuWLSQnJ9OgQQOuv/76/M7mEs48AVmcYxgGdUb9RnJ6FgB7Xu+Elx7oK8XJrt9g9sOQlgilKkH/NeCpeYZFCjtnuoHT/49evnw5LVu2pEKFClSooEdoyEUVh85zLLetHq7SJMWHzQp/vGn/ASjXGLpPUWkScUNO/8nWtm1bKlasyEsvvcS2bdtckUmKoJghc7Otv9altklJRApY6mn4tvvF0nTDw9B3HoSUNzeXiLiE08Xp2LFjPPfcc/zxxx/Url2b+vXrM27cOI4cOeKKfFIEPD9zY7b1/WNvJSpUj1eRYuD8GfikNexZBF7+cNcncNs79ufOiYhbcro4hYWFMWDAAFasWMHevXvp1q0bU6ZMISYmhrZt27oioxRiJ86lMXPtxdK85/VOmn5Aig//knD9LVCyIjy8EOrda3YiEXGxqx4cfoHVauXXX39l+PDhbNq0CavVeuWDTKTB4fnryW/WMm9zHAC/P9eaSmVKmJxIxMUy0+zzMgWUsq9npdsf1usfamosEbl6znSDqx69u2LFCp588kkiIyPp2bMntWvXZu7cuVc+UNzKX3tPAeDj5aHSJO7v7CH4ogPM7ANW+92jePmqNIkUI07f8jF06FCmTZvGsWPHuOWWW3jvvfe48847CQgIcEU+KeQqhgWy/tBZHr+pktlRRFxrzyL4/mH7uCb/knB6H5SpanYqESlgThenP//8k+eff57u3bsTFhbmikxSRCzaFs/6Q2cBqF1Ok/uJm7LZ7A/nXTIGMCCqAXSfap8RXESKHaeL04oVK1yRQ4qgAd+tcyxfHxFkYhIRFzl/BmY/BrsX2NcbPQgd3wRvP1NjiYh58lSc5syZQ6dOnfD29mbOnDmX3feOO+7Il2BS+KRmZLHvZApLdpzgg9/3kGG1AdCzaQUqhgWanE7EBb5/2H6JztPXPs1Aw15mJxIRk+XprjoPDw/i4uIIDw/Hw+PS48ktFovuqnMze04kc+JcGj0n/X3JfTaMuIXQAJ8CTCVSQOK3wqx+cNdEiKpvdhoRcZF8f+SKzWbLdVncx+HTqSzZeQKbzWBn/DkWbI3ndErGJfdvXrk0VSOCGNKpOn7engWYVMSFstLh8Gqo2Mq+HlELnvgLLvMXRhEpXpwe4zR16lR69OiBr2/2mXEzMjKYNm0avXv3zrdwUjDGL9zF+4t3X3afSmGBlAz0YXLfGyjh66VJLsX9JB6BGb3h+EZ4cB5UaGrfrtIkIv/h9ASYnp6eHD9+nPDw8GzbT506RXh4uC7VFTG/bj7OE99cHOR9Q0xJwoP9SMuw0r5WBFXCS1C3fCjeemCvuLN9S2HWQ5B6CvxC4Z4voEo7s1OJSAHJ90t1/2UYRq5nG44cOUJIiG5JL2r+W5rmDGhB3fKh5oURKWiGAcv/B7+/CoYNytaFHl9ByRizk4lIIZXn4tSgQQMsFgsWi4V27drh5XXxUKvVyv79++nYsaNLQoprvD53m2N5xO01VZqkeElLhB+fhB2/2Nfr32+/c85bD6gWkUvLc3Hq0qULABs2bKBDhw6UKHHx8Ro+Pj7ExMRw991353tAcY3UjCwmLdvvWO/TPMa8MCJm2DLbXpo8faDTW/Y5mjR2T0SuIM/FaeTIkQDExMTQo0cP/Pw0AVxR9t875v58vg2eHvoDQ4qZRg/CyR1QtzuUa2R2GhEpIpwe8dunTx+VJjfw+NdrHcsVSus5g1IMZGXAn+Mg/Zx93WKBTm+qNImIU/J0xqlUqVLs2rWLsLAwSpYsedlb0U+fPp1v4cR1jp1NMzuCSMFJOgYzH4TDf9sntew22exEIlJE5ak4/e9//yMoKMixrDl8ir4Ll+pGda5pchIRF9u/DGb1hZST4BsCdXuYnUhEirA8Fac+ffo4lh988EFXZZEC0uvzi49PqV+hpIlJRFzIMOCvD2DRKDCsEFEbuk+F0pXNTiYiRZjTY5zWrVvH5s2bHes//fQTXbp04aWXXiIj49KP6JDCY9nuBMdyvfKae0vcUFqSfRbwhcPtpanuvdBvoUqTiFwzp4vTY489xq5duwDYt28fPXr0ICAggJkzZ/LCCy/ke0DJX2sPXhyD9vtzrXXZVdxTZqp9PJOHt31uprsmgo9ughCRa+d0cdq1axf169cHYObMmbRu3Zpvv/2WyZMn8/333+d3PslnT/5npvCKYYEmJhFxoaCy0P0r6Psr3PCw5mcSkXzjdHEyDAObzQbAokWLuPXWWwGIjo4mISHhcoeKyZLTs4hPSgfg2diqOtsk7sOaCfNfgi3/+ctbhaYQfYN5mUTELTn9rLrGjRvz2muvERsbyx9//MHHH38MwP79+4mIiMj3gJJ/7vt0lWP5jvpRJiYRyUfn4mBmXzj0F/iUgIqtITDM7FQi4qacPuP07rvvsm7dOgYMGMDLL79MlSpVAJg1axbNmzfP94CSf0r4XuzJMZr0UtzBwZXwyU320uQbDHd9otIkIi7l9BmnunXrZrur7oJx48bh6emZL6HENQwMAN67t74u00nRZhiw6mP7XXO2LChTA3p8DWFVzE4mIm7O6eJ0wdq1a9m+fTsANWvWpGHDhvkWSlxj1T7N6i5uwGaD2Q9fHM9U+x64433w0c0OIuJ6ThenEydO0KNHD/744w9CQ0MBOHv2LG3atGHatGmUKVMmvzNKPikT5MvJc+kE+V11XxYxn4cHBJcDDy9o/zo0fUx3zYlIgXF6jNPAgQNJTk5m69atnD59mtOnT7NlyxaSkpJ46qmnXJFR8sHBUymcPGe/oy4yxN/kNCJXIes/E+y2GwmP/A43Pq7SJCIFyulTD/Pnz2fRokXUqFHDsa1mzZpMmDCB9u3b52s4yT/frj7kWA4N8DYxiYiTrFmweLR9Qss+v4CXD3h6QWQ9s5OJSDHkdHGy2Wx4e+f8g9fb29sxv5MUPhlZ9n82DSqE6oyTFB3JJ2DWQ3BgmX19929Q43ZzM4lIseb0pbq2bdvy9NNPc+zYMce2o0eP8uyzz9KuXbt8DSf5r3nl0mZHEMmbw6vhk9b20uRTArpNUWkSEdM5XZw+/PBDkpKSiImJoXLlylSuXJmKFSuSlJTEBx984IqMIlKcGAb8/Sl8eSucOwZhVe3jmWp1MTuZiIjzl+qio6NZt24dixcvdkxHUKNGDWJjY/M9nIgUQ0vHwh9v2pdr3gl3TgDfIHMziYj8y6niNH36dObMmUNGRgbt2rVj4MCBrsolIsVV3R6wehK0eg6a9dddcyJSqOS5OH388cf079+f66+/Hn9/f2bPns3evXsZN26cK/NJPvlyxQHAfhVEpNA5vQ9KVbIvl64MT28AvxBTI4mI5CbPY5w+/PBDRo4cyc6dO9mwYQNTpkzho48+cmU2ySdJaZmOZS9Pp4e1ibiOzQqLX4EPGsPeJRe3qzSJSCGV5z9F9+3bR58+fRzrPXv2JCsri+PHj7skmOSfgd+udyz3b1PZxCQi/5FyCr7uCsveAcMKh1aZnUhE5IryfKkuPT2dwMCLz4Ly8PDAx8eH8+fPuySY5B/bf67P+XrpQcxSCBxZCzN6Q9IR8A6AOz6AOveYnUpE5IqcGhw+fPhwAgICHOsZGRm8/vrrhIRcPK0+fvz4/Esn+cLy7+Dad7pppmUxmWHA2i/h1xfBmgGlq0CPryG8xpWPFREpBPJcnG666SZ27tyZbVvz5s3Zt2+fY92iu18KpT93nTQ7gojdgWXwy7P25eq3Q5ePwS/Y3EwiIk7Ic3FaunSpC2OIq6SkZzmWrbqlTswW0woa9rafaWr+lKYaEJEix+kJMKVo2Rl/zrF8V4NyJiaRYmvPYijXEPxL2otS5/dVmESkyNK96W5ux3F7cQoN8MZbUxFIQbJZYckY+51zsx+FCw8BV2kSkSJMZ5zc3Es/bAbgbGrmFfYUyUepp+H7h2HvYvt6aAX7lAP6u5qIFHEqTm7sVHK6Y7lBhVDzgkjxcmw9TO8NiYfAyx86vwf1epidSkQkXxSKv/5NmDCBmJgY/Pz8aNq0KatXr87TcdOmTcNisdClSxfXBiyijp69OMfW1/2amphEio11U+HzDvbSVLIiPLxIpUlE3MpVFadly5bxwAMP0KxZM44ePQrAV199xfLly51+r+nTpzNo0CBGjhzJunXrqFevHh06dODEiROXPe7AgQMMHjyYVq1aXc2vUKyUC/Un0FcnF8XF0pPhj3FgTYdqt8KjS6FsbbNTiYjkK6eL0/fff0+HDh3w9/dn/fr1pKfbLwclJiYyZswYpwOMHz+eRx55hL59+1KzZk0mTpxIQEAAX3zxxSWPsVqt3H///YwePZpKlSo5/Zki4gK+JaDHVGg3Enp8A/6hZicSEcl3Then1157jYkTJzJp0iS8vb0d21u0aMG6deuceq+MjAzWrl1LbGzsxUAeHsTGxrJy5cpLHvfKK68QHh5Ov379rvgZ6enpJCUlZfsRkXyyexFsnH5xPaoBtBoEHoViFICISL5z+vrNzp07uemmm3JsDwkJ4ezZs069V0JCAlarlYiIiGzbIyIi2LFjR67HLF++nM8//5wNGzbk6TPGjh3L6NGjncrlLob9uAWArAu3gYvkF5sNlr1tn27A0wciaumynIgUC07/tbBs2bLs2bMnx/bly5e7/LLZuXPn6NWrF5MmTSIsLCxPxwwdOpTExETHz+HDh12asbA4n2Fl05FEAOKT0q+wt4gTzp+B7+6FJa8DBtTvCWHXm51KRKRAOH3G6ZFHHuHpp5/miy++wGKxcOzYMVauXMngwYMZPny4U+8VFhaGp6cn8fHx2bbHx8dTtmzZHPvv3buXAwcO0LlzZ8c2279nU7y8vNi5cyeVK1fOdoyvry++vr5O5XIHS3deHFy/8NmcZwhFrsrxTTCjF5w5AF5+cNt4aHC/2alERAqM08VpyJAh2Gw22rVrR2pqKjfddBO+vr4MHjyYgQMHOvVePj4+NGrUiMWLFzumFLDZbCxevJgBAwbk2L969eps3rw527Zhw4Zx7tw53nvvPaKjo539ddzW3/tPO5avjwgyMYm4jQ3fwS/PQFYahF4HPb6CyHpmpxIRKVBOFyeLxcLLL7/M888/z549e0hOTqZmzZqUKFHiqgIMGjSIPn360LhxY5o0acK7775LSkoKffv2BaB3796UK1eOsWPH4ufnR+3a2cdRhIaGAuTYXtz5+3gCUL6kv8lJxG2cPWQvTde3h66f2p89JyJSzFz15D4+Pj7UrFnzmgP06NGDkydPMmLECOLi4qhfvz7z5893DBg/dOgQHrpDx2mfL98PQPuaOS95ilyVm56HUhWh9j26a05Eii2LYRiGMwe0adMGy2Ue0vn7779fcyhXSkpKIiQkhMTERIKDg82O4xLJ6VnUHrkAgFtqRjCpd2OTE0mRtHcJrHgP7vsOvHXmUkTclzPdwOkzTvXr18+2npmZyYYNG9iyZQt9+vRx9u3EBQ6dSnUsv9ZFlzDFSTYbrPgf/P4aGDZ7ebp5iNmpREQKBaeL0//+979ct48aNYrk5ORrDiT5JzzIl4hgP7NjSFFy/iz8+ATsnGdfb/AAtHjGzEQiIoVKvg1UeOCBBy77mBQRKeTit8KkNvbS5OkLnd+HOyeAt8q3iMgF+fbk15UrV+Lnp//AFgb/HDx95Z1E/mv3QpjeC7LOQ0g0dJ8K5RqanUpEpNBxujh17do127phGBw/fpx//vnH6QkwxTXik9IAOHFOM4ZLHpWpbh8Afl0z6PoZBJY2O5GISKHkdHEKCQnJtu7h4UG1atV45ZVXaN++fb4Fk6u3K94+1qx3s+tMTiKFWnoy+P47/1poNPRbaJ9uwMPT3FwiIoWYU8XJarXSt29f6tSpQ8mSmvyusFq4zf4Im/RMPdxXLmH/nzCrH3R+F6rfZt8WVsXUSCIiRYFTg8M9PT1p3749Z8+edVEcuVanki9enmtfK8LEJFIoGYZ9eoGpd0LKCVg5wb5NRETyxOm76mrXrs2+fftckUXywcn/FKd2NVSc5D/SkuwP6F04wj4/U7374P5ZcJkJbUVEJDuni9Nrr73G4MGD+eWXXzh+/DhJSUnZfqRwCCvhY3YEKUxO7IBJbWH7z+DhDbeNhy4fg0+A2clERIqUPI9xeuWVV3juuee49dZbAbjjjjuyPXrFMAwsFgtWqzX/U0qerT14xuwIUtgkHrGXpswUCC5nn2qgvB7DIyJyNfJcnEaPHs3jjz/OkiVLXJlHrtGFgeEJyRkmJ5FCI6Q81L8PEnbDPV9AYJjZiUREiqw8F6cLzwJu3bq1y8LItfP89yxg+5oa31SsnYsDiyeUKGNf7zDWPs2AphoQEbkmTo1xsmgQaaHn623/R9qkYimTk4hpDv4Fn9wEs/qCNcu+zctHpUlEJB84NY9T1apVr1ieTp/W4z4KA1+vfHsMoRQVhgGrPoLfhoNhhYDSkHoKgnT2UUQkvzhVnEaPHp1j5nARKQTSz8GcgbD1B/t6nW7Q+T3wCTQ3l4iIm3GqON17772Eh4e7Kovkgz92njQ7ghS0k7tg+gOQsBM8vOzjmZo8ovmZRERcIM/FSeObiobQAB9SMs6TmqFpIYoFw4AfHrWXpqBI6DYFKjQ1O5WIiNvK80AYQ49lKBKOnj0PQJ1yuqRaLFgs9oksr+8Aj/2p0iQi4mJ5PuNks+mBsUVJuZL+ZkcQV0k+AYdWQc077OvhNeD+GeZmEhEpJnTrlZsq4evU8DUpKg79fXGqgUOrzE4jIlLs6E9XkaLAMGD1p7DgJbBlQVg18NdcXSIiBU3FyY0cPp1qdgRxhYwU+Plp2DzTvl7rLrjjQ/AtYW4uEZFiSMXJjXzz9yHHcmiAj4lJJN8k7IEZveDENvsjVNq/Cjc+qakGRERMouLkRlbsSQAg0McTTw/9weoW9iy0l6YSEdBtMlzX3OxEIiLFmoqTG9l8NBGAW+tEmpxE8k3Tx+2zgjfsDUFlzU4jIlLs6a46N5FlvThdxA0xGjRcZKUkwJyn7GUJ7JfkWr+g0iQiUkjojJObOHDq4sDwO+pHmZhErtqRf2BGb0g6CtYMuGui2YlEROT/UXFyE2dTMwDw8fTAz9vT5DTiFMOAf76AX18EWyaUrgItnjY7lYiI5ELFyU3EJ6UDkGHVDO9FSkYqzB0EG7+zr1e/3f4IFb9gc3OJiEiuVJzchOe/o9VqRekP3CLjzEGYdj/EbwaLB8SOguZPaaoBEZFCTMXJzQT46DJdkeHlByknISAMun0JFW8yO5GIiFyBipObWH/oLGAfLiOFmGFcPKMUFAE9p0FgOISUMzeXiIjkiaYjcBMXHup75Mx5k5PIJaWehq/vhs2zLm6LaqDSJCJShOiMk5s4n2kFoE31cJOTSK6OroMZfSDxEBzfANU6gU+g2alERMRJKk5u4qOlewGw2nRXXaGzdgrMG2yfm6lUJej+lUqTiEgRpeLkBo4nXrw8V7lMCROTSDaZ5+2Faf3X9vVqt9qnGvAPNTWWiIhcPRUnN7Dh34HhAP1aVjQviFyUmQZfdLRflrN4QNth0OJZ8NCwQhGRokzFyQ14etjv0irh64WXp/5gLhS8/aBSa0g8DHd/DpXbmJ1IRETygYqTG0g8nwlA1QhdpjOVzQbpieBf0r7edgQ0fQKCI83NJSIi+UanJ9zAu4t2A5Bp1SROpkk9Dd/1gK/vgSz742/w9FJpEhFxMzrj5AaOnrUPDm9QIdTcIMXV8Y0wvRecPWifDfz4RohuYnYqERFxARWnIu7CZTqA7o2jTUxSTK3/GuY+B1lpEHod9PgaIuuanUpERFxExamI++fAaceypiIoQFnp8OsLsHayff36DtD1k4vjm0RExC2pOBVxF55Nd13pAPz1gN+C88uzsOEbwAJtXoZWz2mqARGRYkDFqYjbEZcEQMkAH5OTFDOtnoODK+C2d6BKrNlpRESkgKg4FXEe/87htDv+nMlJ3JzNBkfWQIWm9vXSlWHAWvudcyIiUmzo2kIRt2a/fYzTrXV027vLnD8L03rCFx1gz+KL21WaRESKHf2Xv4jbczIZgGP/eV6d5KO4LTD9ATizHzx9ISXB7EQiImIiFaciztfLPiC8YQXdzZXvNk6Hn5+GrPMQUgF6TIWoBmanEhERE6k4FXH+3vbiVLtciMlJ3EhWBix4CdZMsq9Xbgd3fwYBpczNJSIiplNxchM+erhv/tn168XS1PpF+4+HpnoQEREVJ5GcatwBNz4JFVtDtY5mpxERkUJEpymKuL3/Dg6Xa2AYsHqS/UG9ABYLdByr0iQiIjmoOBVhSWmZpGZYAfD8dz4ncVJaEszoBfMGw+xH7fM1iYiIXIIu1RVhiakXH/DbpKIGLjvtxHb7VAOn9oCnD1S/1X62SURE5BJUnNyAv7cnft4avOyUzbNgzkDITIXg8tB9KpRvZHYqEREp5FScpHixZsJvw+Hvj+3rlW6Guz+HwDBTY4mISNGg4lSE/bHrJABWwzA5SRGSkQw75tqXWz0HbV7WVAMiIpJnKk5F2IQlewDIyNKA5jzzL2mfATzpGFS/zew0IiJSxKg4FWG+XvabIuuW16zhl2QYsOoj8A2Chr3t26Ia6NEpIiJyVVSciqi9J5M5cCoVgH4tK5qcppBKP2cfAL71B/tdczEtoVQls1OJiEgRVijmcZowYQIxMTH4+fnRtGlTVq9efcl9J02aRKtWrShZsiQlS5YkNjb2svu7o4TkdNq984djvUyQr4lpCqmTO2FSO3tp8vCGDmOgpAqmiIhcG9OL0/Tp0xk0aBAjR45k3bp11KtXjw4dOnDixIlc91+6dCn33XcfS5YsYeXKlURHR9O+fXuOHj1awMnNM2bedsdy+5oRNInRHE7ZbP0RJrWFhJ0QFAV950GTRzRHk4iIXDOLYZh7S1bTpk254YYb+PDDDwGw2WxER0czcOBAhgwZcsXjrVYrJUuW5MMPP6R3795X3D8pKYmQkBASExMJDg6+5vxmqDViPin/zhi+f+ytWFQILlo4Ala8Z1+OaQX3fAklypibSURECjVnuoGpZ5wyMjJYu3YtsbGxjm0eHh7ExsaycuXKPL1HamoqmZmZlCpVPM66zF53xFGaHr2pkkrT/+cTZP/fFk9Drx9VmkREJF+ZOjg8ISEBq9VKREREtu0RERHs2LEjT+/x4osvEhUVla18/Vd6ejrp6emO9aSkpKsPbDKbzWDQjI2O9b4tYswLU5jYrBfnYmr1HMS0gOuam5tJRETckuljnK7FG2+8wbRp0/jhhx/w8/PLdZ+xY8cSEhLi+ImOji7glPnndGqGY/mD+xoQGeJvYppCwDBg1UT4rB1k2O8wxMNDpUlERFzG1OIUFhaGp6cn8fHx2bbHx8dTtmzZyx779ttv88Ybb/Dbb79Rt27dS+43dOhQEhMTHT+HDx/Ol+xmWL47wbHcuV6UiUkKgYwU+P5hmP8iHFsPG78zO5GIiBQDphYnHx8fGjVqxOLFix3bbDYbixcvplmzZpc87q233uLVV19l/vz5NG7c+LKf4evrS3BwcLafomrh9vgr71QcJOyBz2Jhyyzw8IKOb0Djh8xOJSIixYDpE2AOGjSIPn360LhxY5o0acK7775LSkoKffv2BaB3796UK1eOsWPHAvDmm28yYsQIvv32W2JiYoiLiwOgRIkSlChRwrTfoyDM3XQcgBsrFY+B8Lna/jP8+CSkJ0GJCOg2Ba67dMkWERHJT6YXpx49enDy5ElGjBhBXFwc9evXZ/78+Y4B44cOHcLD4+KJsY8//piMjAzuueeebO8zcuRIRo0aVZDRC9SSHRfnterWqOiO07om/3wBvzxrX67QHLp9CUGXv6QrIiKSn0yfx6mgFcV5nNIyrVQfPt+xvuPVjvh5e5qYyCSJR+CT1lC3B9wyGjy9zU4kIiJuwJluYPoZJ7my+VviHMsTH2hUvEpT4lEIKWdfDikP/VdDYGlzM4mISLFVpKcjKC6emb7BsdyxdjG5NGUYsHoSvF8ftv9ycbtKk4iImEjFqZBLSst0LF9XOsDEJAUoIxV+eBzmDQZrBuz81exEIiIigC7VFXrz/r2TDuD7J4rBxI6n98H0XhC/BSyeEDsKmg80O5WIiAig4lToDZm92bEcVsLXxCQFYOevMPsxSE+EwDL2B/RWbGV2KhEREQcVp0Js8MyLz6WLCsn9kTJuI34rfHevfTm6KXSbDMHFfHZ0EREpdFScCqm0TCuz1h5xrP80oKWJaQpARC1o8ph9uf1r4OVjbh4REZFcqDgVQuczrNQYcXHeptUvt6NMkBtepju6DoLLQZB9slM6vmF/SK+IiEghpT+lChHDMBjx05Zspen68BKEB7nZZTrDgLWT4YsOMOshsGbZt6s0iYhIIaczToXI+IW7mLryoGO9UlggCwe1NjGRC2Seh7mDYcPX9nW/EMhKA0/3fs6giIi4BxWnQuKrVQf54Pc9jvXvHrmRphXd7GG+Zw7YpxqI2wQWD2g7HFo8ozNNIiJSZKg4FQJ/7zvF8B+3ONa/f6I5ja4raWIiF9i9EL5/GNLOQkBpuOcLqHSz2alEREScouJUCCzbneBYnvV4M/crTdYsWPCyvTSVawzdp9ifOyciIlLEqDgVAh8usV+iu7N+FI1j3OzyHICnF3Sfah8Qfsto8HLDOwRFRKRY0OCSQqR62WCzI+SfYxtg/dcX18OrQ6c3VJpERKRI0xknk6VmZDmWuzYsZ2KSfLT+a/hlENiyoHQVqHCj2YlERETyhYqTybYdS3Ishxf1SS4z0+DXF2DdFPt61Y5Qppq5mURERPKRipPJlu+5ODDcYrGYmOQanT0EM3rDsfWABdq8DK2e01QDIiLiVlScTGSzGby7aDcAJQO8TU5zDfb+DrP6wfnT4F8S7v4MqsSanUpERCTfqTiZ6MCpFMfy6Dtrm5jkGp3Ybi9NUQ3sd8+FVjA7kYiIiEuoOJno4OlUAEoH+nBHvSiT01yDG58En0Coey94u9lz9URERP5DA1BMZLUaAESXCjA5iZPiNsM33SDt34HtFgs0elClSURE3J6Kk4k2HjkLgGEY5gZxxobv4LNbYPdvsPgVs9OIiIgUKF2qM1GAj/3rP3LmvMlJ8iArHeYPhX8+t69XiYU2L5mbSUREpICpOJloZ5z9Ulfb6uEmJ7mCxCMwow8c/QewQOsXofUL4OFpdjIREZECpeJkoj0nkwGIS0ozOcllHFkL33aD1FPgFwJdP4Oq7c1OJSIiYgoVJxPFJ6UDUL1skMlJLiM0Gjx9oGwd6P4VlKpodiIRERHTqDiZqGywHyfPpVMzqpA93Dcz7eIdciXCofcce4Hy9jc3l4iIiMl0V10hEBrgY3aEi+K3wcfNYdOMi9vKVFVpEhERQcXJVMcTC9nYps2z4LN2cHov/DkOrFlmJxIRESlUdKnORAnJ9jFONpvJ8zhlZcBvw2D1J/b1SjfD3V+Ap/71EBER+S/9yVgIxIQFmvfhScdhZh84/Ld9vdVz0OZlTTUgIiKSCxUnk8T95zJdWAlfc0KcPwuftobkePANhrs+geq3mpNFRESkCFBxMsk7v+10LIf4e5sTwj8U6t8PuxZAj6+gdGVzcoiIiBQRKk4mMW1UU/o5yEiBoLL29bbD4KbnwaeIPWhYRETEBLqrziTLdycAMKRT9YL70JM7YVJbmNbT/uw5sI9lUmkSERHJExUnk1x4zIpRUKeetv5gL00Ju+wDws8eLqAPFhERcR+6VGeCbceSHMu31HTxA36tmbBwJKyaYF+PaQX3fAklyrj2c0VERNyQipMJPl++37FcuUwJ133QuXiY+SAc+su+3uJpaDtC8zOJiIhcJf0JaoJV+04BEF3KH4vF4roP+ulJe2nyCYIuH0HNO1z3WSIiIsWAxjgVsMTzmRw9ex6AB5tXdO2H3ToOom+ER5eoNImIiOQDFacCtmBrnGO5S/2o/H3z9GTY/svF9VKV4KH5EHZ9/n6OiIhIMaXiVMB2xp1zLJfOzxnDE3bbH9A7/QHYs/jidldeChQRESlmNMapgF0YGN6ySlj+vem2OfDjk5BxDkqUBR8Tn30nIiLixlScCpiftwdpmTYql8mHcmPNgt9fgRXv2deva2GfaiAo4trfW0RERHJQcSpgPp724vTAjddd2xsln4RZfeHAMvt6swEQOwo8TXrunYiISDGg4mQSD49rHHu0Z5G9NHkHwp0fQu2u+RNMRERELknFqaiqfx+cPQi17oIy1cxOIyIiUizorroClGm1kZSWdXUHZ6TCgpch9fTFbTcPUWkSEREpQDrjVID++6gVH08nOuupvTC9F5zYCqf2QM/pLkgnIiIiV6LiVIA2H010LEeXCsjbQTvmwQ+PQ3oiBIZD86dclE5ERESuRMWpAM3ddByA+5pUuPLONissGQPL3ravRzeFblMgONKFCUVERORyVJwKyImkNMeyn/cVLtOlnoZZD8G+Jfb1po/DLa+Cl48LE4qIiMiVqDgVkDfm73Asv9Ch+pUPOL0PvAPgjg+gzj0uTCYiIiJ5peJUADYdOcvsdUcBKBPki7+PZ86dDMP+vxYLBJSCe78BiydE1CzApCIiInI5mo6gAHyz6pBjedqjN+bcIfM8/NQf1k6+uK1sHZUmERGRQkZnnArAvoRkAG6vG0nlMiWyv3h6P8zoBXGbYctsqH47lChjQkoRERG5EhUnF7PZDNYcOANAqcD/N7h7128w+2FIS4SAMLjnC5UmERGRQkzFycVmrT3iWG5eOcy+YLPCH2/afwDKNYbuUyGknAkJRUREJK9UnFzshe83OZY71IoAmw2+uw92L7BvvOFh6DAGvHxNSigiIiJ5pcHhLrQjLsmxfFudSCwWC3h4QPQN4OUPd30Ct72j0iQiIlJE6IyTixiGQcd3lznW376j0sUXWz4HtbpC6comJBMREZGrpTNOLjLlrwMA+JLBpNAp+H99G2Sk2l/08FBpEhERKYIKRXGaMGECMTEx+Pn50bRpU1avXn3Z/WfOnEn16tXx8/OjTp06zJs3r4CS5t2fuxMox0lm+ozmlrQFEL8V9v9hdiwRERG5BqYXp+nTpzNo0CBGjhzJunXrqFevHh06dODEiRO57v/XX39x33330a9fP9avX0+XLl3o0qULW7ZsKeDklxdzZiW/+L5MXY/94F8KHvgeqnUyO5aIiIhcA4thXHjWhzmaNm3KDTfcwIcffgiAzWYjOjqagQMHMmTIkBz79+jRg5SUFH755RfHthtvvJH69eszceLEK35eUlISISEhJCYmEhwcnH+/yAU2G4m/jSFo5dt4WAxOBtWkTL/pEFoh/z9LRERErpkz3cDUM04ZGRmsXbuW2NhYxzYPDw9iY2NZuXJlrsesXLky2/4AHTp0uOT+6enpJCUlZftxlUOnUpn73hOErBqHh8Xg26y2HO/6g0qTiIiImzC1OCUkJGC1WomIiMi2PSIigri4uFyPiYuLc2r/sWPHEhIS4viJjo7On/C5OJeeyavxLThihPF85qPMrzSUuhXLuuzzREREpGC5/XQEQ4cOZdCgQY71pKQkl5WnqBB/Bt3dhlXW5nQKDaJ11XCXfI6IiIiYw9TiFBYWhqenJ/Hx8dm2x8fHU7Zs7mdqypYt69T+vr6++PoWzASTJQN96H6D685oiYiIiLlMvVTn4+NDo0aNWLx4sWObzWZj8eLFNGvWLNdjmjVrlm1/gIULF15yfxEREZH8YvqlukGDBtGnTx8aN25MkyZNePfdd0lJSaFv374A9O7dm3LlyjF27FgAnn76aVq3bs0777zDbbfdxrRp0/jnn3/49NNPzfw1REREpBgwvTj16NGDkydPMmLECOLi4qhfvz7z5893DAA/dOgQHh4XT4w1b96cb7/9lmHDhvHSSy9x/fXX8+OPP1K7dm2zfgUREREpJkyfx6mguXweJxERESlSisw8TiIiIiJFiYqTiIiISB6pOImIiIjkkYqTiIiISB6pOImIiIjkkYqTiIiISB6pOImIiIjkkYqTiIiISB6pOImIiIjkkYqTiIiISB6pOImIiIjkkekP+S1oFx7Nl5SUZHISERERKQwudIK8PL632BWnc+fOARAdHW1yEhERESlMzp07R0hIyGX3sRh5qVduxGazcezYMYKCgrBYLPn+/klJSURHR3P48OErPmFZ8o++d3PoezePvntz6Hs3h6u/d8MwOHfuHFFRUXh4XH4UU7E74+Th4UH58uVd/jnBwcH6P5UJ9L2bQ9+7efTdm0Pfuzlc+b1f6UzTBRocLiIiIpJHKk4iIiIieaTilM98fX0ZOXIkvr6+ZkcpVvS9m0Pfu3n03ZtD37s5CtP3XuwGh4uIiIhcLZ1xEhEREckjFScRERGRPFJxEhEREckjFaerMGHCBGJiYvDz86Np06asXr36svvPnDmT6tWr4+fnR506dZg3b14BJXUvznzvkyZNolWrVpQsWZKSJUsSGxt7xX9Okjtn/32/YNq0aVgsFrp06eLagG7M2e/+7Nmz9O/fn8jISHx9falatar+e3MVnP3e3333XapVq4a/vz/R0dE8++yzpKWlFVBa9/Dnn3/SuXNnoqKisFgs/Pjjj1c8ZunSpTRs2BBfX1+qVKnC5MmTXZ4TAEOcMm3aNMPHx8f44osvjK1btxqPPPKIERoaasTHx+e6/4oVKwxPT0/jrbfeMrZt22YMGzbM8Pb2NjZv3lzAyYs2Z7/3nj17GhMmTDDWr19vbN++3XjwwQeNkJAQ48iRIwWcvGhz9nu/YP/+/Ua5cuWMVq1aGXfeeWfBhHUzzn736enpRuPGjY1bb73VWL58ubF//35j6dKlxoYNGwo4edHm7Pf+zTffGL6+vsY333xj7N+/31iwYIERGRlpPPvsswWcvGibN2+e8fLLLxuzZ882AOOHH3647P779u0zAgICjEGDBhnbtm0zPvjgA8PT09OYP3++y7OqODmpSZMmRv/+/R3rVqvViIqKMsaOHZvr/t27dzduu+22bNuaNm1qPPbYYy7N6W6c/d7/v6ysLCMoKMiYMmWKqyK6pav53rOysozmzZsbn332mdGnTx8Vp6vk7Hf/8ccfG5UqVTIyMjIKKqJbcvZ779+/v9G2bdts2wYNGmS0aNHCpTndWV6K0wsvvGDUqlUr27YePXoYHTp0cGEyO12qc0JGRgZr164lNjbWsc3Dw4PY2FhWrlyZ6zErV67Mtj9Ahw4dLrm/5HQ13/v/l5qaSmZmJqVKlXJVTLdztd/7K6+8Qnh4OP369SuImG7par77OXPm0KxZM/r3709ERAS1a9dmzJgxWK3Wgopd5F3N9968eXPWrl3ruJy3b98+5s2bx6233logmYsrM/9sLXbPqrsWCQkJWK1WIiIism2PiIhgx44duR4TFxeX6/5xcXEuy+luruZ7//9efPFFoqKicvwfTS7tar735cuX8/nnn7Nhw4YCSOi+rua737dvH7///jv3338/8+bNY8+ePTz55JNkZmYycuTIgohd5F3N996zZ08SEhJo2bIlhmGQlZXF448/zksvvVQQkYutS/3ZmpSUxPnz5/H393fZZ+uMk7i9N954g2nTpvHDDz/g5+dndhy3de7cOXr16sWkSZMICwszO06xY7PZCA8P59NPP6VRo0b06NGDl19+mYkTJ5odza0tXbqUMWPG8NFHH7Fu3Tpmz57N3LlzefXVV82OJi6iM05OCAsLw9PTk/j4+Gzb4+PjKVu2bK7HlC1b1qn9Jaer+d4vePvtt3njjTdYtGgRdevWdWVMt+Ps9753714OHDhA586dHdtsNhsAXl5e7Ny5k8qVK7s2tJu4mn/nIyMj8fb2xtPT07GtRo0axMXFkZGRgY+Pj0szu4Or+d6HDx9Or169ePjhhwGoU6cOKSkpPProo7z88st4eOj8hCtc6s/W4OBgl55tAp1xcoqPjw+NGjVi8eLFjm02m43FixfTrFmzXI9p1qxZtv0BFi5ceMn9Jaer+d4B3nrrLV599VXmz59P48aNCyKqW3H2e69evTqbN29mw4YNjp877riDNm3asGHDBqKjowsyfpF2Nf/Ot2jRgj179jjKKsCuXbuIjIxUacqjq/neU1NTc5SjC+XV0BPNXMbUP1tdPvzczUybNs3w9fU1Jk+ebGzbts149NFHjdDQUCMuLs4wDMPo1auXMWTIEMf+K1asMLy8vIy3337b2L59uzFy5EhNR3AVnP3e33jjDcPHx8eYNWuWcfz4ccfPuXPnzPoViiRnv/f/T3fVXT1nv/tDhw4ZQUFBxoABA4ydO3cav/zyixEeHm689tprZv0KRZKz3/vIkSONoKAg47vvvjP27dtn/Pbbb0blypWN7t27m/UrFEnnzp0z1q9fb6xfv94AjPHjxxvr1683Dh48aBiGYQwZMsTo1auXY/8L0xE8//zzxvbt240JEyZoOoLC7IMPPjAqVKhg+Pj4GE2aNDFWrVrleK1169ZGnz59su0/Y8YMo2rVqoaPj49Rq1YtY+7cuQWc2D04871fd911BpDjZ+TIkQUfvIhz9t/3/1JxujbOfvd//fWX0bRpU8PX19eoVKmS8frrrxtZWVkFnLroc+Z7z8zMNEaNGmVUrlzZ8PPzM6Kjo40nn3zSOHPmTMEHL8KWLFmS63+zL3zXffr0MVq3bp3jmPr16xs+Pj5GpUqVjC+//LJAsloMQ+cSRURERPJCY5xERERE8kjFSURERCSPVJxERERE8kjFSURERCSPVJxERERE8kjFSURERCSPVJxERERE8kjFSURERCSPVJxE5KpNnjyZ0NBQs2NcNYvFwo8//njZfR588EG6dOlSIHlEpPBTcRIp5h588EEsFkuOnz179pgdjcmTJzvyeHh4UL58efr27cuJEyfy5f2PHz9Op06dADhw4AAWi4UNGzZk2+e9995j8uTJ+fJ5lzJq1CjH7+np6Ul0dDSPPvoop0+fdup9VPJEXM/L7AAiYr6OHTvy5ZdfZttWpkwZk9JkFxwczM6dO7HZbGzcuJG+ffty7NgxFixYcM3vXbZs2SvuExIScs2fkxe1atVi0aJFWK1Wtm/fzkMPPURiYiLTp08vkM8XkbzRGScRwdfXl7Jly2b78fT0ZPz48dSpU4fAwECio6N58sknSU5OvuT7bNy4kTZt2hAUFERwcDCNGjXin3/+cby+fPlyWrVqhb+/P9HR0Tz11FOkpKRcNpvFYqFs2bJERUXRqVMnnnrqKRYtWsT58+ex2Wy88sorlC9fHl9fX+rXr8/8+fMdx2ZkZDBgwAAiIyPx8/PjuuuuY+zYsdne+8KluooVKwLQoEEDLBYLN998M5D9LM6nn35KVFQUNpstW8Y777yThx56yLH+008/0bBhQ/z8/KhUqRKjR48mKyvrsr+nl5cXZcuWpVy5csTGxtKtWzcWLlzoeN1qtdKvXz8qVqyIv78/1apV47333nO8PmrUKKZMmcJPP/3kOHu1dOlSAA4fPkz37t0JDQ2lVKlS3HnnnRw4cOCyeUQkdypOInJJHh4evP/++2zdupUpU6bw+++/88ILL1xy//vvv5/y5cuzZs0a1q5dy5AhQ/D29gZg7969dOzYkbvvvptNmzYxffp0li9fzoABA5zK5O/vj81mIysri/fee4933nmHt99+m02bNtGhQwfuuOMOdu/eDcD777/PnDlzmDFjBjt37uSbb74hJiYm1/ddvXo1AIsWLeL48ePMnj07xz7dunXj1KlTLFmyxLHt9OnTzJ8/n/vvvx+AZcuW0bt3b55++mm2bdvGJ598wuTJk3n99dfz/DseOHCABQsW4OPj49hms9koX748M2fOZNu2bYwYMYKXXnqJGTNmADB48GC6d+9Ox44dOX78OMePH6d58+ZkZmbSoUMHgoKCWLZsGStWrKBEiRJ07NiRjIyMPGcSkX8ZIlKs9enTx/D09DQCAwMdP/fcc0+u+86cOdMoXbq0Y/3LL780QkJCHOtBQUHG5MmTcz22X79+xqOPPppt27JlywwPDw/j/PnzuR7z/99/165dRtWqVY3GjRsbhmEYUVFRxuuvv57tmBtuuMF48sknDcMwjIEDBxpt27Y1bDZbru8PGD/88INhGIaxf/9+AzDWr1+fbZ8+ffoYd955p2P9zjvvNB566CHH+ieffGJERUUZVqvVMAzDaNeunTFmzJhs7/HVV18ZkZGRuWYwDMMYOXKk4eHhYQQGBhp+fn4GYADG+PHjL3mMYRhG//79jbvvvvuSWS98drVq1bJ9B+np6Ya/v7+xYMGCy76/iOSkMU4iQps2bfj4448d64GBgYD97MvYsWPZsWMHSUlJZGVlkZaWRmpqKgEBATneZ9CgQTz88MN89dVXjstNlStXBuyX8TZt2sQ333zj2N8wDGw2G/v376dGjRq5ZktMTKREiRLYbDbS0tJo2bIln332GUlJSRw7dowWLVpk279FixZs3LgRsF9mu+WWW6hWrRodO3bk9ttvp3379tf0Xd1///088sgjfPTRR/j6+vLNN99w77334uHh4fg9V6xYke0Mk9Vqvez3BlCtWjXmzJlDWloaX3/9NRs2bGDgwIHZ9pkwYQJffPEFhw4d4vz582RkZFC/fv3L5t24cSN79uwhKCgo2/a0tDT27t17Fd+ASPGm4iQiBAYGUqVKlWzbDhw4wO23384TTzzB66+/TqlSpVi+fDn9+vUjIyMj1wIwatQoevbsydy5c/n1118ZOXIk06ZN46677iI5OZnHHnuMp556KsdxFSpUuGS2oKAg1q1bh4eHB5GRkfj7+wOQlJR0xd+rYcOG7N+/n19//ZVFixbRvXt3YmNjmTVr1hWPvZTOnTtjGAZz587lhhtuYNmyZfzvf/9zvJ6cnMzo0aPp2rVrjmP9/Pwu+b4+Pj6OfwZvvPEGt912G6NHj+bVV18FYNq0aQwePJh33nmHZs2aERQUxLhx4/j7778vmzc5OZlGjRplK6wXFJYbAESKEhUnEcnV2rVrsdlsvPPOO46zKRfG01xO1apVqVq1Ks8++yz33XcfX375JXfddRcNGzZk27ZtOQralXh4eOR6THBwMFFRUaxYsYLWrVs7tq9YsYImTZpk269Hjx706NGDe+65h44dO3L69GlKlSqV7f0ujCeyWq2XzePn50fXrl355ptv2LNnD9WqVaNhw4aO1xs2bMjOnTud/j3/v2HDhtG2bVueeOIJx+/ZvHlznnzyScc+//+MkY+PT478DRs2ZPr06YSHhxMcHHxNmUREg8NF5BKqVKlCZmYmH3zwAfv27eOrr75i4sSJl9z//PnzDBgwgKVLl3Lw4EFWrFjBmjVrHJfgXnzxRf766y8GDBjAhg0b2L17Nz/99JPTg8P/6/nnn+fNN99k+vTp7Ny5kyFDhrBhwwaefvppAMaPH893333Hjh072LVrFzNnzqRs2bK5TtoZHh6Ov78/8+fPJz4+nsTExEt+7v3338/cuXP54osvHIPCLxgxYgRTp05l9OjRbN26le3btzNt2jSGDRvm1O/WrFkz6taty5gxYwC4/vrr+eeff1iwYAG7du1i+PDhrFmzJtsxMTExbNq0iZ07d5KQkEBmZib3338/YWFh3HnnnSxbtoz9+/ezdOlSnnrqKY4cOeJUJhFBg8NFirvcBhRfMH78eCMyMtLw9/c3OnToYEydOtUAjDNnzhiGkX3wdnp6unHvvfca0dHRho+PjxEVFWUMGDAg28Dv1atXG7fccotRokQJIzAw0Khbt26Owd3/9f8Hh/9/VqvVGDVqlFGuXDnD29vbqFevnvHrr786Xv/000+N+vXrG4GBgUZwcLDRrl07Y926dY7X+c/gcMMwjEmTJhnR0dGGh4eH0bp160t+P1ar1YiMjDQAY+/evTlyzZ8/32jevLnh7+9vBAcHG02aNDE+/fTTS/4eI0eONOrVq5dj+3fffWf4+voahw4dMtLS0owHH3zQCAkJMUJDQ40nnnjCGDJkSLbjTpw44fh+AWPJkiWGYRjG8ePHjd69exthYWGGr6+vUalSJeORRx4xEhMTL5lJRHJnMQzDMLe6iYiIiBQNulQnIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ5pOIkIiIikkcqTiIiIiJ59H9KlEqD5kko9gAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        },
        "id": "05ae24eb",
        "outputId": "ea4add65-267d-450f-c87b-403ed8eac66f"
      },
      "source": [
        "df_orig = pd.read_csv('/content/archive (1).zip')\n",
        "dept_left = df_orig.groupby('Department')['left'].agg(['mean','count']).sort_values('mean', ascending=False)\n",
        "print(dept_left)\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.bar(dept_left.index, dept_left['mean'])\n",
        "plt.title('Fraction of employees who left by department')\n",
        "plt.ylabel('Fraction left (0-1)')\n",
        "plt.xlabel('Department')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 mean  count\n",
            "Department                  \n",
            "hr           0.290934    739\n",
            "accounting   0.265971    767\n",
            "technical    0.256250   2720\n",
            "support      0.248991   2229\n",
            "sales        0.244928   4140\n",
            "marketing    0.236597    858\n",
            "IT           0.222494   1227\n",
            "product_mng  0.219512    902\n",
            "RandD        0.153748    787\n",
            "management   0.144444    630\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "a037914a",
        "outputId": "2e944e4d-aee3-4e25-e992-5ec8afbe787c"
      },
      "source": [
        "plt.figure(figsize=(6,4))\n",
        "plt.bar(salary_left.index, salary_left['left_rate'])\n",
        "plt.title('Fraction of employees who left by salary level')\n",
        "plt.ylabel('Fraction left (0-1)')\n",
        "plt.xlabel('Salary')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98ed4c71",
        "outputId": "1d355f5b-231d-4326-efc6-9e4540ed1ab5"
      },
      "source": [
        "salary_map = {'low': 0, 'medium': 1, 'high': 2}\n",
        "df['salary_num'] = df['salary'].map(salary_map)\n",
        "df = pd.get_dummies(df, columns=['Department'], drop_first=True)\n",
        "salary_left = df.groupby('salary').agg({'left': ['mean','count']})\n",
        "salary_left.columns = ['left_rate','count']\n",
        "print(salary_left)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        left_rate  count\n",
            "salary                  \n",
            "high     0.066289   1237\n",
            "low      0.296884   7316\n",
            "medium   0.204313   6446\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 838
        },
        "id": "f728d7bb",
        "outputId": "9e211de4-56da-4ad1-ebd5-9a920210a4a0"
      },
      "source": [
        "df = pd.read_csv('/content/archive (1).zip')   # change path if needed\n",
        "print(\"Shape:\", df.shape)\n",
        "display(df.head())\n",
        "\n",
        "# 2) Quick info\n",
        "display(df.info())\n",
        "display(df.describe())"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (14999, 10)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   satisfaction_level  last_evaluation  number_project  average_montly_hours  \\\n",
              "0                0.38             0.53               2                   157   \n",
              "1                0.80             0.86               5                   262   \n",
              "2                0.11             0.88               7                   272   \n",
              "3                0.72             0.87               5                   223   \n",
              "4                0.37             0.52               2                   159   \n",
              "\n",
              "   time_spend_company  Work_accident  left  promotion_last_5years Department  \\\n",
              "0                   3              0     1                      0      sales   \n",
              "1                   6              0     1                      0      sales   \n",
              "2                   4              0     1                      0      sales   \n",
              "3                   5              0     1                      0      sales   \n",
              "4                   3              0     1                      0      sales   \n",
              "\n",
              "   salary  \n",
              "0     low  \n",
              "1  medium  \n",
              "2  medium  \n",
              "3     low  \n",
              "4     low  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc986898-f3a3-4547-a1b1-45f44eaf254c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfaction_level</th>\n",
              "      <th>last_evaluation</th>\n",
              "      <th>number_project</th>\n",
              "      <th>average_montly_hours</th>\n",
              "      <th>time_spend_company</th>\n",
              "      <th>Work_accident</th>\n",
              "      <th>left</th>\n",
              "      <th>promotion_last_5years</th>\n",
              "      <th>Department</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.38</td>\n",
              "      <td>0.53</td>\n",
              "      <td>2</td>\n",
              "      <td>157</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>5</td>\n",
              "      <td>262</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.11</td>\n",
              "      <td>0.88</td>\n",
              "      <td>7</td>\n",
              "      <td>272</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.72</td>\n",
              "      <td>0.87</td>\n",
              "      <td>5</td>\n",
              "      <td>223</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.37</td>\n",
              "      <td>0.52</td>\n",
              "      <td>2</td>\n",
              "      <td>159</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc986898-f3a3-4547-a1b1-45f44eaf254c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc986898-f3a3-4547-a1b1-45f44eaf254c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc986898-f3a3-4547-a1b1-45f44eaf254c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e8e5ce9f-432c-400c-8c92-0fc199334bc9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8e5ce9f-432c-400c-8c92-0fc199334bc9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e8e5ce9f-432c-400c-8c92-0fc199334bc9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"satisfaction_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28236501199688324,\n        \"min\": 0.11,\n        \"max\": 0.8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.8,\n          0.37,\n          0.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"last_evaluation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18912958520548814,\n        \"min\": 0.52,\n        \"max\": 0.88,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.86,\n          0.52,\n          0.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number_project\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          5,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_montly_hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 157,\n        \"max\": 272,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          262,\n          159,\n          272\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time_spend_company\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 3,\n        \"max\": 6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_accident\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promotion_last_5years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Department\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"sales\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"medium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 14999 entries, 0 to 14998\n",
            "Data columns (total 10 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   satisfaction_level     14999 non-null  float64\n",
            " 1   last_evaluation        14999 non-null  float64\n",
            " 2   number_project         14999 non-null  int64  \n",
            " 3   average_montly_hours   14999 non-null  int64  \n",
            " 4   time_spend_company     14999 non-null  int64  \n",
            " 5   Work_accident          14999 non-null  int64  \n",
            " 6   left                   14999 non-null  int64  \n",
            " 7   promotion_last_5years  14999 non-null  int64  \n",
            " 8   Department             14999 non-null  object \n",
            " 9   salary                 14999 non-null  object \n",
            "dtypes: float64(2), int64(6), object(2)\n",
            "memory usage: 1.1+ MB\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "None"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       satisfaction_level  last_evaluation  number_project  \\\n",
              "count        14999.000000     14999.000000    14999.000000   \n",
              "mean             0.612834         0.716102        3.803054   \n",
              "std              0.248631         0.171169        1.232592   \n",
              "min              0.090000         0.360000        2.000000   \n",
              "25%              0.440000         0.560000        3.000000   \n",
              "50%              0.640000         0.720000        4.000000   \n",
              "75%              0.820000         0.870000        5.000000   \n",
              "max              1.000000         1.000000        7.000000   \n",
              "\n",
              "       average_montly_hours  time_spend_company  Work_accident          left  \\\n",
              "count          14999.000000        14999.000000   14999.000000  14999.000000   \n",
              "mean             201.050337            3.498233       0.144610      0.238083   \n",
              "std               49.943099            1.460136       0.351719      0.425924   \n",
              "min               96.000000            2.000000       0.000000      0.000000   \n",
              "25%              156.000000            3.000000       0.000000      0.000000   \n",
              "50%              200.000000            3.000000       0.000000      0.000000   \n",
              "75%              245.000000            4.000000       0.000000      0.000000   \n",
              "max              310.000000           10.000000       1.000000      1.000000   \n",
              "\n",
              "       promotion_last_5years  \n",
              "count           14999.000000  \n",
              "mean                0.021268  \n",
              "std                 0.144281  \n",
              "min                 0.000000  \n",
              "25%                 0.000000  \n",
              "50%                 0.000000  \n",
              "75%                 0.000000  \n",
              "max                 1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-910ce228-efa1-4f9b-92ea-5ed88209da10\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfaction_level</th>\n",
              "      <th>last_evaluation</th>\n",
              "      <th>number_project</th>\n",
              "      <th>average_montly_hours</th>\n",
              "      <th>time_spend_company</th>\n",
              "      <th>Work_accident</th>\n",
              "      <th>left</th>\n",
              "      <th>promotion_last_5years</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>14999.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.612834</td>\n",
              "      <td>0.716102</td>\n",
              "      <td>3.803054</td>\n",
              "      <td>201.050337</td>\n",
              "      <td>3.498233</td>\n",
              "      <td>0.144610</td>\n",
              "      <td>0.238083</td>\n",
              "      <td>0.021268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.248631</td>\n",
              "      <td>0.171169</td>\n",
              "      <td>1.232592</td>\n",
              "      <td>49.943099</td>\n",
              "      <td>1.460136</td>\n",
              "      <td>0.351719</td>\n",
              "      <td>0.425924</td>\n",
              "      <td>0.144281</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.360000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>96.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.440000</td>\n",
              "      <td>0.560000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>156.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.640000</td>\n",
              "      <td>0.720000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.820000</td>\n",
              "      <td>0.870000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>245.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>310.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-910ce228-efa1-4f9b-92ea-5ed88209da10')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-910ce228-efa1-4f9b-92ea-5ed88209da10 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-910ce228-efa1-4f9b-92ea-5ed88209da10');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fe3ebb19-c3dc-4247-9b97-5036e599ad00\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe3ebb19-c3dc-4247-9b97-5036e599ad00')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fe3ebb19-c3dc-4247-9b97-5036e599ad00 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"satisfaction_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.752785300377,\n        \"min\": 0.09,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6128335222348156,\n          0.64,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"last_evaluation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.725216503965,\n        \"min\": 0.17116911062327592,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.7161017401160078,\n          0.72,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number_project\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5301.632605184108,\n        \"min\": 1.2325923553183857,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.80305353690246,\n          4.0,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_montly_hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5240.043131004933,\n        \"min\": 49.943099371284305,\n        \"max\": 14999.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          201.0503366891126,\n          200.0,\n          14999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time_spend_company\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5301.586356319514,\n        \"min\": 1.4601362305354546,\n        \"max\": 14999.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          14999.0,\n          3.498233215547703,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work_accident\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.871740631288,\n        \"min\": 0.0,\n        \"max\": 14999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1446096406427095,\n          1.0,\n          0.3517185523801279\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.863271830312,\n        \"min\": 0.0,\n        \"max\": 14999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2380825388359224,\n          1.0,\n          0.425924099380363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promotion_last_5years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5302.888447508509,\n        \"min\": 0.0,\n        \"max\": 14999.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.021268084538969265,\n          1.0,\n          0.1442814645785774\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}
